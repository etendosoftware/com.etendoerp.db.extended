pipeline {
  options {
    disableConcurrentBuilds()
  }

  environment {
    CONTEXT_NAME        = 'etendo'
    BBDD_SID            = 'etendo'
    BBDD_PORT           = '5432'
    BBDD_SYSTEMUSER     = 'postgres'
    BBDD_SYSTEMPASS     = 'syspass'
    BBDD_USER           = 'tad'
    BBDD_PASSWORD       = 'tad'
    NEXUS_USER          = credentials('nexus-admin-user')
    NEXUS_PASSWORD      = credentials('nexus-admin-passwd')
    GITHUB_USER         = 'etendobot'
    GITHUB_TOKEN        = credentials('github-read-package-token')

    ACCESS_TOKEN        = credentials('access_token_github')

    REPOSITORY_NAME     = 'com.etendoerp.db.extended'

    EMAIL_ADDRESS       = credentials('email_builds')

    CORE_URL_REPO = 'https://github.com/etendosoftware/etendo_core'
    CLASSIC_DIR   = 'etendo_core'
    MODULE_URL    = 'https://github.com/etendosoftware/com.etendoerp.db.extended'
    TOMCAT_URL    = "https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.98/bin/apache-tomcat-9.0.98.tar.gz"

    COMMIT_AUTHOR_NAME  = sh(returnStdout: true, script: "git log -1 --pretty=format:'%an'").trim()
    COMMIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -1 --pretty=format:'%ae'").trim()

    JAVA_HOME           = '/usr/lib/jvm/java-17-openjdk-amd64'
    BUILD_CLASSIC       = true

    CONTEXT_BUILD       = 'Module Tests'
    STATUSCORE          = '1'

    MODULE_PACKAGE  = 'com.etendoerp.db.extended'

    COMMIT_INPROGRESS_STATUS = "pending"
    COMMIT_SUCCESS_STATUS    = "success"
    COMMIT_FAILED_STATUS     = "failure"

    SUCCESS             = 'SUCCESS'
    FAILED              = 'FAILED'
    UNSTABLE            = 'UNSTABLE'

    TRUE                = 'true'
    FALSE               = 'false'

    MAIN_BRANCH    = "main"
    DEVELOP_BRANCH = "develop"
  }

  agent { // MARK: - Agent
    kubernetes {
      inheritFrom 'jenkins-node-rx'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node
  namespace: jenkins2025
  labels:
    app.kubernetes.io/name: jenkins-node
spec:
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.7
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 5000Mi
        requests:
          cpu: 3072m
          memory: 5000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      lifecycle:
        postStart:
          exec:
            command:
              - bash
              - '-c'
              - >-
                chmod a+x /var/run/docker.sock && rm
                /etc/apt/sources.list.d/pgdg.list || echo 0 && apt update && apt
                install -y curl
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
    - name: postgres
      image: postgres:16
      workingDir: /home/jenkins
      env:
        - name: POSTGRES_PASSWORD
          value: syspass
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext:
    privileged: true
"""
    }
  }
  stages {
    stage ('Build Environment Etendo Core') { // MARK: - Build Environment Etendo Core
      steps {
        container('compiler') {
          script {
            try {
              sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Build Environment Etendo Classic\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
              withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                withCredentials([usernamePassword(credentialsId: "koodu_credentials", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                  def sshCmd = "ssh -i ${keyfile} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

                  echo "-------------------------- Tomcat Configuration --------------------------"

                  sh "wget -O apache-tomcat.tar.gz $TOMCAT_URL"
                  sh "tar -xvf apache-tomcat.tar.gz -C $WORKSPACE"

                  env.TOMCAT_FOLDER = sh(script: "basename ${TOMCAT_URL} .tar.gz", returnStdout: true).trim()
                                env.CATALINA_HOME = "${WORKSPACE}/${TOMCAT_FOLDER}"
                                env.CATALINA_BASE = "${WORKSPACE}/${TOMCAT_FOLDER}"

                  echo "-------------------------- Selecting the Classic Correct Branch for Repository Cloning --------------------------"
                  env.CLASSIC_BRANCH = env.MAIN_BRANCH
                  if (env.GIT_BRANCH.startsWith(env.DEVELOP_BRANCH) || ((env.GIT_BRANCH.startsWith("feature") || env.GIT_BRANCH.startsWith("epic")) && !(env.GIT_BRANCH.contains("-Y")))) {
                      env.CLASSIC_BRANCH = env.DEVELOP_BRANCH
                  }
                  echo "---------------------- Clonning Classic Repo ----------------------"
                  sh "sudo apt update && sudo apt install -y python3-venv"
                  sh "git clone --branch ${CLASSIC_BRANCH} ${CORE_URL_REPO}"
                  sh "printenv"

                  dir(CLASSIC_DIR) {
                    env.WORKDIR_MODULE = "${pwd()}/modules/${REPOSITORY_NAME}"

                    echo "---------------------- Setup Classic Repo ----------------------"
                    sh """
                    echo "\n
                    context.name=${CONTEXT_NAME}\n
                    bbdd.sid=${BBDD_SID}\n
                    bbdd.port=${BBDD_PORT}\n
                    bbdd.systemUser=${BBDD_SYSTEMUSER}\n
                    bbdd.systemPassword=${BBDD_SYSTEMPASS}\n
                    bbdd.user=${BBDD_USER}\n
                    bbdd.password=${BBDD_PASSWORD}\n
                    nexusUser=${NEXUS_USER}\n
                    nexusPassword=${NEXUS_PASSWORD}\n
                    githubUser=${GITHUB_USER}\n
                    githubToken=${GITHUB_TOKEN}\n
                    allow.root=true\n
                    org.gradle.daemon=false
                    org.gradle.jvmargs=-Dfile.encoding=UTF-8" > gradle.properties
                    """
                    sh './gradlew prepareConfig'
                    sh './gradlew setup'
                    sh './gradlew expandModules'

                    echo '------------- Cloning DB Extended module -------------'
                    sh """
                    cd modules
                    git clone -b ${GIT_BRANCH} https://github.com/etendosoftware/com.etendoerp.db.extended.git
                    """

                    echo "---------------------- Building Classic Environment ----------------------"
                    sh './gradlew install'
                    sh './gradlew update.database smartbuild'

                    echo "---------------------- Classic Environment Successful ----------------------"
                    currentBuild.result = SUCCESS
                  }
                }
              }
            } catch (Exception e) {
                env.ERROR_MESSAGE = "Build of Classic Environment Failed"
                echo "--------------- ${env.ERROR_MESSAGE} ---------------"
                echo 'Exception occurred: ' + e.toString()
                currentBuild.result = FAILED
                error(env.ERROR_MESSAGE)
            }
          }
        }
      }
    }

    stage ("Run Etendo DB Extended Module tests") { // MARK: - Run Etendo DB Extended Module tests
      when {
        expression {
          currentBuild.result == SUCCESS
        }
      }
      steps {
        container('compiler') {
          script {
            try {
              sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Running Module Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""

              echo "---------------------- Starting Etendo DB Extended Module Tests ----------------------"
              sh """
              cd ${CLASSIC_DIR}
              ./gradlew test --tests "com.etendoerp.db.extended.*"
              ./gradlew jacocoRootReport
              """
              echo "---------------------- DB Extended Module Tests Successful ----------------------"
            } catch (Exception e) {
              echo "---------------------- DB Extended Module Tests Failed ----------------------"
              echo 'Exception occurred: ' + e.toString()
              currentBuild.result = UNSTABLE
              unstable('DB Extended Module Tests Failed')
              env.STATUSTEST = "0"
            }
            publishHTML([
              allowMissing: false,
              alwaysLinkToLastBuild: false,
              keepAll: true,
              reportDir: "${CLASSIC_DIR}/build/reports/tests/test",
              reportFiles: '*.html',
              reportName: 'DB EXTENDED MODULE TESTS REPORT',
              reportTitles: ''
            ])
          }
        }
      }
    }

    stage ('Test DB Extended Module - Partitioning') {
      steps {
        container('compiler') {
          script {
            def durationPart
            def durationUnpart
            try {
            echo '------------- Inserting partition config -------------'

            withEnv(["PGPASSWORD=${env.BBDD_PASSWORD}"]) {
              sh """
                psql -h localhost -U ${BBDD_USER} -d ${BBDD_SID} <<EOF

                INSERT INTO etarc_table_config (
                  etarc_table_config_id,
                  ad_client_id,
                  ad_org_id,
                  isactive,
                  created,
                  createdby,
                  updated,
                  updatedby,
                  ad_table_id,
                  ad_column_id
                ) VALUES (
                  '0783EE16357C471B8D6DC5BD3F126364',
                  '0',
                  '0',
                  'Y',
                  now(),
                  '100',
                  now(),
                  '100',
                  'A1E2D02EE8154BD59FA6747C9E85A928',
                  'F038FDD2AAEC47AAA752573384DF5DCB'
                );
              """
            }
            echo '------------- Running migrate.py -------------'
            sh """
            cd ${CLASSIC_DIR}
            python3 -m venv modules/com.etendoerp.db.extended/.venv
            bash -c "
              source ./modules/com.etendoerp.db.extended/.venv/bin/activate
              pip install pyyaml psycopg2-binary
              echo yes | python3 modules/com.etendoerp.db.extended/tool/migrate.py
            "
            """

            echo '------------- update.database - smartbuild -------------'
            dir(CLASSIC_DIR) {
              def startTime = System.currentTimeMillis()
              sh './gradlew update.database -Dforce=yes smartbuild'
              def endTime = System.currentTimeMillis()
              durationPart = (endTime - startTime) / 1000
            }
            echo '------------- Running regression tests on partitioned table -------------'
            sh """
            # Inserting
            cd ${CLASSIC_DIR}
            psql -h localhost -U ${BBDD_USER} -d ${BBDD_SID} <<EOF
            INSERT INTO ad_audit_trail (
                ad_audit_trail_id,
                ad_client_id,
                ad_org_id,
                isactive,
                created,
                createdby,
                updated,
                updatedby,
                ad_table_id,
                record_id,
                record_revision,
                ad_user_id,
                event_time,
                processtype,
                process_id,
                action,
                ad_column_id,
                old_char,
                new_char
            ) VALUES (
                '12345678901234567890123456789012', -- ad_audit_trail_id
                '0',       -- ad_client_id
                '0',       -- ad_org_id
                'Y',       -- isactive
                now(),     -- created
                '0',       -- createdby
                now(),     -- updated
                '0',       -- updatedby
                '1234567', -- ad_table_id
                '1000033', -- record_id
                1,         -- record_revision
                '0',       -- ad_user_id
                now(),     -- event_time
                'Manual',  -- processtype
                '0',       -- process_id
                'UPDATE',  -- action
                '7654321', -- ad_column_id
                'oldValue',-- old_char
                'newValue' -- new_char
            );
            EOF
            """
            sh """
            # Selecting
            psql -h localhost -U ${BBDD_USER} -d ${BBDD_SID} -c "SELECT * FROM ad_audit_trail WHERE ad_audit_trail_id = '12345678901234567890123456789012';"
            """
            sh """
            # Deleting
            psql -h localhost -U ${BBDD_USER} -d ${BBDD_SID} -c "DELETE FROM ad_audit_trail WHERE ad_audit_trail_id = '12345678901234567890123456789012';"
            """

            echo '------------- Starting Tomcat for validation -------------'
            sh "${WORKSPACE}/${TOMCAT_FOLDER}/bin/catalina.sh start"
            sleep time: 60, unit: 'SECONDS'

            def tomcatResponse = sh(
                script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/${CONTEXT_NAME}/security/Login_FS.html",
                returnStdout: true
            ).trim()

            if (tomcatResponse != "200") {
                error("Tomcat failed after partitioning. Response code: ${tomcatResponse}")
            }

            sh "${WORKSPACE}/${TOMCAT_FOLDER}/bin/catalina.sh stop"

            echo '------------- Running unpartition.py -------------'
            sh """
            cd ${CLASSIC_DIR}
            bash -c "
              source ./modules/com.etendoerp.db.extended/.venv/bin/activate
              python3 modules/com.etendoerp.db.extended/tool/unpartition.py "ad_audit_trail"
            "
            """

            echo '------------- update.database - smartbuild (after unpartition) -------------'
            dir(CLASSIC_DIR) {
              def startTime = System.currentTimeMillis()
              sh './gradlew update.database -Dforce=yes smartbuild'
              def endTime = System.currentTimeMillis()
              durationUnpart = (endTime - startTime) / 1000
            }

            echo '------------- Running regression tests after unpartition a table -------------'
            sh """
                # Inserting
                cd ${CLASSIC_DIR}
                psql -h localhost -U ${BBDD_USER} -d ${BBDD_SID} <<EOF
                INSERT INTO ad_audit_trail (
                    ad_audit_trail_id,
                    ad_client_id,
                    ad_org_id,
                    isactive,
                    created,
                    createdby,
                    updated,
                    updatedby,
                    ad_table_id,
                    record_id,
                    record_revision,
                    ad_user_id,
                    event_time,
                    processtype,
                    process_id,
                    action,
                    ad_column_id,
                    old_char,
                    new_char
                ) VALUES (
                    '12345678901234567890123456789012', -- ad_audit_trail_id
                    '0',       -- ad_client_id
                    '0',       -- ad_org_id
                    'Y',       -- isactive
                    now(),     -- created
                    '0',       -- createdby
                    now(),     -- updated
                    '0',       -- updatedby
                    '1234567', -- ad_table_id
                    '1000033', -- record_id
                    1,         -- record_revision
                    '0',       -- ad_user_id
                    now(),     -- event_time
                    'Manual',  -- processtype
                    '0',       -- process_id
                    'UPDATE',  -- action
                    '7654321', -- ad_column_id
                    'oldValue',-- old_char
                    'newValue' -- new_char
                );
                EOF
                """
                sh """
                # Selecting
                psql -h localhost -U ${BBDD_USER} -d ${BBDD_SID} -c "SELECT * FROM ad_audit_trail WHERE ad_audit_trail_id = '12345678901234567890123456789012';"
                """
                sh """
                # Deleting
                psql -h localhost -U ${BBDD_USER} -d ${BBDD_SID} -c "DELETE FROM ad_audit_trail WHERE ad_audit_trail_id = '12345678901234567890123456789012';"
            """

            echo '------------- Execution time -------------'
            echo "🔁 Execution times (update and smartbuild):"
            echo "⏱️ Partitoned time: ${durationPart} secons"
            echo "⏱️ Unpartitioned time: ${durationUnpart} secons"

            echo '------------- Final Tomcat check -------------'
            sh "${WORKSPACE}/${TOMCAT_FOLDER}/bin/catalina.sh start"
            sleep time: 60, unit: 'SECONDS'
            def finalResponse = sh(
                script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/${CONTEXT_NAME}/security/Login_FS.html",
                returnStdout: true
            ).trim()

            if (finalResponse != "200") {
                error("Tomcat failed after unpartitioning. Response code: ${finalResponse}")
            }

            sh "${WORKSPACE}/${TOMCAT_FOLDER}/bin/catalina.sh stop"

            } catch (Exception e) {
              echo '❌ DB Extended test failed.'
              echo e.getMessage()
              currentBuild.result = FAILED
              error("Partitioning test failed.")
            }
          }
        }
      }
    }
  }

  post {
    success {
      container('compiler') {
        script {
          sh "./pipelines/utils/build-update.sh ${MODULE_PACKAGE} ${COMMIT_SUCCESS_STATUS} \"Successful DB Extended Test\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
        }
      }
    }
    failure {
      container('compiler') {
        script {
          sh "./pipelines/utils/build-update.sh ${MODULE_PACKAGE} ${COMMIT_FAILED_STATUS} \"Build Failed\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
        }
      }
      mail to: EMAIL_ADDRESS,
      subject: "⛔ ERROR - ${currentBuild.fullDisplayName}",
      mimeType: 'text/html',
      body:  """
      <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
              <p><em>${new Date()}</em></p>
              <p>__________________________________________________________</p>

              <h2 class="header">🚫 BUILD FAILED 🚫</h2>

              <p>
                  <strong>Commit:</strong> <a href="${MODULE_URL}/commits/${env.GIT_COMMIT}">${MODULE_URL}/commits/${env.GIT_COMMIT}</a><br />
                  <strong>Author:</strong> ${COMMIT_AUTHOR_NAME} (${COMMIT_AUTHOR_EMAIL})
              </p>
              <p>
                  The build has failed unexpectedly.<br />
                  💡 This build was on the ${MODULE_PACKAGE} module.<br />
                  To more information on the failing run visit:<br />
                  <a href="${env.BUILD_URL}">${env.BUILD_URL}</a>
              </p>
      __________________________________________________________
      """
    }
  }
}
